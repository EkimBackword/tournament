import Telegraf, { Context, ContextMessageUpdate } from 'telegraf';
const SocksAgent = require('socks5-https-client/lib/Agent');
import { TELEGRAM_CONFIG } from '../config/database.config';
import { DECK_CLASSES, getRuName } from './hearthstone.info';
import Tournament, { TournamentStatusENUM } from '../models/Tournament';
import User, { IUser } from '../models/User';
import Members, { UserRoles, IMembers } from '../models/Members';
import BanRequest from '../models/BanRequest';

const Markup = require('telegraf/markup');
const session = require('telegraf/session');
const passwordHash = require('password-hash');

let Instance: TelegramService = null;

export class TelegramService {
    private bot: Telegraf<ContextMessageUpdate>;
    readonly socksAgent = new SocksAgent({
        socksHost: TELEGRAM_CONFIG.proxy.host,
        socksPort: TELEGRAM_CONFIG.proxy.port,
        socksUsername: TELEGRAM_CONFIG.proxy.login,
        socksPassword: TELEGRAM_CONFIG.proxy.psswd,
    });

    constructor() {
        const config = TELEGRAM_CONFIG.needProxy ? { telegram: { agent: this.socksAgent } } : {};
        this.bot = new Telegraf(TELEGRAM_CONFIG.apiToken, config);
        this.init();
        (this.bot as any).catch((err: any) => {
            console.log('Ooops', err);
        });
        this.bot.startPolling();
        Instance = this;
    }

    static getInstance() {
        if (Instance === null) {
            Instance = new TelegramService();
        }
        return Instance;
    }

    sendMessage(msg: string, chatId: string|number, extra?: any) {
        return this.bot.telegram.sendMessage(chatId, msg, extra);
    }

    private init() {
        this.bot.use(session());
        this.bot.start((ctx) => this.start(ctx));
        this.bot.help((ctx) => this.help(ctx));
        this.bot.on('sticker', (ctx) => ctx.reply('üëç'));

        this.commandHandler();
        this.actionHandler();
        this.hearsHandler();
    }

    private start(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ç–∞–≤–µ—Ä–Ω—É!
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é: /help
        `);
    }

    private help(ctx: ContextMessageUpdate) {
        return ctx.reply(`
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å—Ç–∏–∫–µ—Ä))
–ù–æ —ç—Ç–æ –Ω–µ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ.

–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
1) /check_in [BattleTag]:[Password]

–ù–∞–ø—Ä–∏–º–µ—Ä: /check_in MyNikname#1234:MyPassword
–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∑–∞—Ä–∏–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤.
BattleTag - –∫–∞–∫ –≤ Hearthstone.
Password - –ª—é–±–æ–π, —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ –æ–Ω –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–ü–∞—Ä–æ–ª—å –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ, –Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω —ç—Ç–æ –≤–∞–º –Ω–µ–¥–∞—Å—Ç–Ω–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–π. –í –±—É–¥—É—é—à–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–æ–π –ª–∏–±–æ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.

* –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è BattleTag –∏–ª–∏ Password.
* BattleTag –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞, –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.
* –ù–∞–ø—Ä–∏–º–µ—Ä, /check_in MyNewNikname#4321

2) /add_me
–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å—ã –∫–æ–ª–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –±—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
        `);
    }

    private commandHandler() {
        this.bot.command('add_me', (ctx) => this.addToTournament(ctx));
        this.bot.command('check_in', (ctx) => this.checkIn(ctx));
    }

    private async checkIn(ctx: ContextMessageUpdate) {
        const msg = /\/check_in (.*)/.exec(ctx.message.text);
        try {
            const BattleTag = msg[1].split(':')[0];
            const Password = msg[1].split(':')[1];
            const user = await User.find<User>({ where: { 'ChatID': ctx.chat.id } });
            if (user) {
                user.BattleTag = BattleTag;
                let result = `–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã!\r\n–õ–æ–≥–∏–Ω: ${user.Login};\r\nBattleTag: ${user.BattleTag};\r\n`;
                if (Password) {
                    const hash = passwordHash.generate(Password);
                    user.Hash = hash;
                    result += `–ü–∞—Ä–æ–ª—å: ${Password};`;
                }
                await user.save();
                return ctx.reply(result);
            } else {
                const _Password = Password ? Password : this.generatePassword();
                const hash = passwordHash.generate(_Password);
                const data: IUser = {
                    Login: ctx.chat.username ? ctx.chat.username : ( BattleTag ? BattleTag : 'User_From_Telegram' ),
                    FIO: `${ctx.chat.last_name} ${ctx.chat.first_name}`,
                    Role: UserRoles.user,
                    Hash: hash,
                    ChatID: ctx.chat.id,
                    ChatInfo: JSON.stringify(ctx.chat),
                    BattleTag: BattleTag
                };
                let newUser = new User(data);
                newUser = await newUser.save();
                return ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ http://app.tavern.mzharkov.ru/login\r\n–õ–æ–≥–∏–Ω: ${newUser.Login};\r\nBattleTag: ${newUser.BattleTag};\r\n–ü–∞—Ä–æ–ª—å: ${_Password}`);
            }
        } catch (err) {
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
        }
    }

    private async addToTournament(ctx: ContextMessageUpdate) {
        const user = await User.find<User>({ where: { 'ChatID': ctx.chat.id } });
        if (user) {
            (ctx as any).session.user = user.toJSON();
            const data = await Tournament.findAll<Tournament>({ where: { Status: TournamentStatusENUM.new }, offset: 0, limit: 10 });
            if (data.length === 0) {
                return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
            } else {
                return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä',
                    Markup.inlineKeyboard(
                        data.map(t => Markup.callbackButton(`‚û°Ô∏è ${t.Title}`, `tournament:select:${t.ID}`))
                            .concat([Markup.callbackButton('–û—Ç–º–µ–Ω–∞', `deck:cancel`)])
                    , {columns: 1}).extra()
                );
            }
        } else {
            return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /check_in [BattleTag]:[Password]');
        }
    }

    private actionHandler() {
        (this.bot as any).action(/(tournament|deck):select:(.*)/, (ctx: ContextMessageUpdate) => this.selectDeck(ctx));
        (this.bot as any).action(/(tournament|deck):cancel/, (ctx: ContextMessageUpdate) => this.CancelSelect(ctx));
        (this.bot as any).action(/ban:deck:(.*):(.*)/, (ctx: ContextMessageUpdate) => this.banDeck(ctx));
    }

    private CancelSelect(ctx: ContextMessageUpdate) {
        (ctx as any).session.selectedTournament = null;
        return ctx.reply(`–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ!`);
    }

    private async selectDeck(ctx: ContextMessageUpdate) {
        const match = (ctx as any).match;
        let selectedTournament: any;
        let tournament: Tournament;
        const user = await User.find<User>({ where: { 'ChatID': ctx.chat.id } });
        if (match[1] === 'tournament') {
            tournament = await Tournament.findById<Tournament>(match[2], { include: [ Members ] });
            const existMember = tournament.Members.find(member => member.UserID === user.ID);
            if (existMember) {
                const decks: string[] = existMember.DeckList.split(', ');
                const decksString = decks.length > 0 ?
                    '(–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—ã: ' +
                    DECK_CLASSES.filter(d => decks.some(_d => _d === d.id))
                        .map(d => d.title)
                        .join(', ')
                    + ')' :
                    '';
                return ctx.reply(`–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ! ${decksString}`);
            }
            /** –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ */
            selectedTournament = {
                id: match[2],
                deckCount: tournament.DeckCount,
                decks: [],
                user: user
            };
            (ctx as any).session.selectedTournament = selectedTournament;
        } else if ((ctx as any).session.selectedTournament) {
            (ctx as any).session.selectedTournament.decks.push(match[2]);
            selectedTournament = (ctx as any).session.selectedTournament;
            tournament = await Tournament.findById<Tournament>(selectedTournament.id);
        } else {
            return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –¢—É—Ä–Ω–∏—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!`);
        }
        const decks: string[] = selectedTournament.decks;
        const decksString = decks.length > 0 ?
            '(–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—ã: ' +
            DECK_CLASSES.filter(d => decks.some(_d => _d === d.id))
                .map(d => d.title)
                .join(', ')
            + ')' :
            '';
        if (selectedTournament.deckCount == selectedTournament.decks.length) {
            try {
                const data: IMembers = {
                    UserID: user.ID,
                    TournamentID: tournament.ID,
                    DeckList: DECK_CLASSES.filter(d => decks.some(_d => _d === d.id))
                                        .map(d => d.id)
                                        .join(', ')
                };
                let newMember = new Members(data);
                newMember = await newMember.save();
                return ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–Ω—ã! ${decksString}`);
            } catch (err) {
                return ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
            }
        } else {
            return ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å ${decksString}`,
                Markup.inlineKeyboard(
                    DECK_CLASSES.filter(d => !decks.some(_d => _d === d.id))
                                .map(d => Markup.callbackButton(d.title, `deck:select:${d.id}`))
                                .concat([Markup.callbackButton('–û—Ç–º–µ–Ω–∞', `deck:cancel`)])
                , {columns: 3}).extra()
            );
        }
    }

    private async banDeck(ctx: ContextMessageUpdate) {
        const match = (ctx as any).match;
        const deck = match[1];
        const banRequestID = match[2];
        const ChatID = ctx.chat.id;
        const banRequest = await BanRequest.findById<BanRequest>(banRequestID);
        if (ChatID === banRequest.GamerChatID) {
            if (banRequest.OpponentBannedDeck !== null) {
                return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—É –¥–ª—è –±–∞–Ω–∞.');
            }
            banRequest.OpponentBannedDeck = deck;
        } else if (ChatID === banRequest.OpponentChatID) {
            if (banRequest.GamerBannedDeck !== null) {
                return ctx.reply('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–æ–¥—É –¥–ª—è –±–∞–Ω–∞.');
            }
            banRequest.GamerBannedDeck = deck;
        } else {
            return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ç—á');
        }
        await banRequest.save();
        if (banRequest.OpponentBannedDeck && banRequest.GamerBannedDeck) {
            let DeckToSend;
            let BattleTagToSend;
            if (ChatID === banRequest.GamerChatID) {
                banRequest.OpponentBannedDeck = deck;
                BattleTagToSend = banRequest.OpponentBattleTag;
                DeckToSend = banRequest.GamerBannedDeck;
                this.sendMessage(`–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${banRequest.GamerBattleTag} –∑–∞–±–∞–Ω–∏–ª ${getRuName(deck)}`, banRequest.OpponentChatID);
            } else if (ChatID === banRequest.OpponentChatID) {
                banRequest.GamerBannedDeck = deck;
                BattleTagToSend = banRequest.GamerBattleTag;
                DeckToSend = banRequest.OpponentBannedDeck;
                this.sendMessage(`–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${banRequest.OpponentBattleTag} –∑–∞–±–∞–Ω–∏–ª ${getRuName(deck)}`, banRequest.GamerChatID);
            }
            return ctx.reply(`–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ ${BattleTagToSend} –∑–∞–±–∞–Ω–∏–ª ${getRuName(DeckToSend)}`);
        } else {
            return ctx.reply('–ñ–¥—ë–º –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.');
        }
    }

    private hearsHandler() {
        this.bot.hears(/[–ü,–ø]—Ä–∏–≤–µ—Ç/i, (ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è'));
        this.bot.hears(/(.*) [–ü,–ø]–æ–∫–∞ (.*)/i, (ctx) => {
            console.log((ctx as any).match);
            return ctx.reply('–ü–æ–∫–∞ –ø–æ–∫–∞');
        });
    }

    private generatePassword() {
        const length = 8;
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let retVal = '';
        for (let i = 0, n = charset.length; i < length; ++i) {
            retVal += charset.charAt(Math.floor(Math.random() * n));
        }
        return retVal;
    }
}